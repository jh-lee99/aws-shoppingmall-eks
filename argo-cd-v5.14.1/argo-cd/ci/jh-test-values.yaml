server:
  extraArgs:
    - --insecure
  ingress:
    enabled: true
    annotations:
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/group.name: sg-external
      # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
      alb.ingress.kubernetes.io/ssl-redirect: "443"
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-northeast-1:654654416925:certificate/69f70a14-adf6-4158-b269-d57fc0c89d80
      external-dns.alpha.kubernetes.io/hostname: ljh-argo.youthlab.click
    ingressClassName: "alb"
    hosts:
      - ljh-argo.youthlab.click
    paths:
      - /
configs:
  credentialTemplates:
    ssh-creds:
      url: git@github.com:jh-lee99
      #sshPrivateKey: |
      # ssh 키를 생성하고 입력하세요
  repositories:
    ljh-front-shop-main:
      name: ljh-front-shop-main
      url: git@github.com:jh-lee99/ljh-front-shop-main.git
    ljh-backend-shop-login:
      name: ljh-backend-shop-login
      url: git@github.com:jh-lee99/ljh-backend-shop-login.git
    ljh-was-login:
      name: ljh-was-login
      url: git@github.com:jh-lee99/ljh-was-login.git
## Notifications controller
notifications:
  enabled: true
  name: notifications-controller
  cm:
    create: true
    # -- Annotations to be added to argocd-cm configmap
    annotations:
      argocd-notifications.argoproj.io/channels: "eks-depl-status"
      notifications.argoproj.io/subscribe.on-deleted.slack: "eks-depl-status"
      notifications.argoproj.io/subscribe.on-deployed.slack: "eks-depl-status"
      notifications.argoproj.io/subscribe.on-sync-failed.slack: "eks-depl-status"
      notifications.argoproj.io/subscribe.on-sync-status-unknown.slack: "eks-depl-status"
      notifications.argoproj.io/subscribe.on-health-degraded.slack: "eks-depl-status"
      notifications.argoproj.io/subscribe.on-sync-succeeded.slack: "eks-depl-status"
  argocdUrl: "https://ljh-argo.youthlab.click"
  logFormat: "json"
  logLevel: "info"
  secret:
    # -- Whether helm chart creates controller secret
    create: true
    # -- key:value pairs of annotations to be added to the secret
    # annotations:
    items:
      slack-token: { { YOUR_SLACK_TOKEN } }
  notifiers:
    service.slack: |
      token: $slack-token
  subscriptions:
    # subscription for on-sync-status-unknown trigger notifications
    - recipients:
        - slack:#eks-depl-status
        # - email:test@gmail.com
      triggers:
        - on-deployed
        - on-health-degraded
        - on-sync-failed
        - on-sync-running
        - on-sync-status-unknown
        - on-sync-succeeded
    # subscription restricted to applications with matching labels only
    # - recipients:
    #     - slack:test3
    #   selector: test=true
    #   triggers:
    #     - on-sync-status-unknown
  templates:
    template.app-deployed: |
      message: |
        :white_check_mark: *애플리케이션 {{.app.metadata.name}} 배포를 완료하였습니다.*
        완료 시간: {{.app.status.operationState.finishedAt}}.
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name }}",
            "title_link": "{{ .context.argocdUrl }}/applications/{{ .app.metadata.name }}",
            "color": "#18be52",
            "fields": [
              {
                "title": "Sync Status",
                "value": "{{ .app.status.sync.status }}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{ .app.spec.source.repoURL }}",
                "short": true
              },
              {
                "title": "Revision",
                "value": "{{ .app.status.sync.revision }}",
                "short": true
              }
              {{- range $index, $c := .app.status.conditions }}
              {{- if not $index }},{{ end }}
              {{- if $index }},{{ end }}
              {
                "title": "{{ $c.type }}",
                "value": "{{ $c.message }}",
                "short": true
              }
              {{end}}
            ]
          }]
    template.app-sync-failed: |
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} 애플리케이션 {{.app.metadata.name}} 의 sync가 일치하지 않습니다. 
        *시간*: {{.app.status.operationState.finishedAt}} 
        *에러*: {{.app.status.operationState.message}}
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#E96D76",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-status-unknown: |
      message: |
        {{if eq .serviceType "slack"}}:mega:{{end}} *[{{.app.spec.destination.namespace}}] 애플리케이션 {{.app.metadata.name}}의 신규 업데이트가 발생하였습니다.*
        {{if ne .serviceType "slack"}}
        {{range $c := .app.status.conditions}}
            * {{$c.message}}
        {{end}}
        {{end}}
        *[{{.app.spec.destination.namespace}}] 환경 배포*: ({{.context.argocdUrl}}/applications/{{.app.metadata.name}})

      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#E96D76",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-succeeded: |
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} *애플리케이션 {{.app.metadata.name}}이 성공적으로 synced 되었습니다.*
        완료 시간: {{.app.status.operationState.finishedAt}}.
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18be52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]

  triggers:
    trigger.on-deployed: |
      - description: 배포가 성공적으로 이루어졌습니다.
        oncePer: app.status.sync.revision
        send:
        - app-deployed
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy' and app.status.sync.status != 'OutOfSync'
    trigger.on-health-degraded: |
      - description: Application has degraded
        send:
        - app-health-degraded
        when: app.status.health.status == 'Degraded'
    trigger.on-sync-failed: |
      - description: Application syncing has failed
        send:
        - app-sync-failed
        when: app.status.operationState.phase in ['Error', 'Failed']
    trigger.on-sync-running: |
      - description: Application is being synced
        send:
        - app-sync-running
        when: app.status.operationState.phase in ['Running']
    trigger.on-sync-status-unknown: |
      - description: Application status is 'OutOfSync'
        send:
        - app-sync-status-unknown
        when: app.metadata.name == 'ljh-backend-shop-login-prod' and app.status.sync.status == 'OutOfSync'
    trigger.on-sync-succeeded: |
      - description: Application syncing has succeeded
        send:
        - app-sync-succeeded
        when: app.status.operationState.phase in ['Succeeded']
    defaultTriggers: |
      - on-sync-status-unknown
